name: Build Android APK

on:
  workflow_dispatch: {}
  push:
    paths:
      - 'Android/**'
      - 'wolf/**'
      - 'images/**'
      - '.github/workflows/android-apk.yml'

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      ANDROIDAPI: '33'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            zip unzip openjdk-17-jdk \
            build-essential autoconf automake libtool pkg-config \
            libtool-bin libltdl-dev m4 gettext autopoint \
            cmake ninja-build git curl \
            libssl-dev zlib1g-dev

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install required Android packages
        run: |
          SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_ROOT" --install \
            "build-tools;33.0.2" \
            "build-tools;36.1.0" \
            "platforms;android-31" \
            "platforms;android-33" \
            "platform-tools" \
            "ndk;25.1.8937393"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_ROOT" --licenses || true
          echo "GLOBAL_ANDROID_SDK_ROOT=$SDK_ROOT" >> "$GITHUB_ENV"

      - name: Prime Buildozer SDK directory
        run: |
          SDK_ROOT=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          BUILD_SDK="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILD_SDK"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$BUILD_SDK" --install \
            "build-tools;33.0.2" \
            "build-tools;36.1.0" \
            "platforms;android-31" \
            "platforms;android-33" \
            "platform-tools" \
            "ndk;25.1.8937393"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$BUILD_SDK" --licenses || true
          echo "ANDROID_SDK_ROOT=$BUILD_SDK" >> "$GITHUB_ENV"

      - name: Expose sdkmanager to Buildozer SDK path
        run: |
          GLOBAL=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          BUILD_SDK="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILD_SDK/cmdline-tools"
          # Prefer existing latest from global SDK, fall back to common installed dir
          if [ -d "$GLOBAL/cmdline-tools/latest" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/latest" "$BUILD_SDK/cmdline-tools/latest"
          elif [ -d "$GLOBAL/cmdline-tools/16.0" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/16.0" "$BUILD_SDK/cmdline-tools/latest"
          fi
          mkdir -p "$BUILD_SDK/tools/bin"
          # Try several places to locate sdkmanager, then ensure a tools/bin/sdkmanager exists
          if [ -x "$GLOBAL/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/latest/bin/sdkmanager" "$BUILD_SDK/tools/bin/sdkmanager"
          elif [ -x "$BUILD_SDK/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sfn "$BUILD_SDK/cmdline-tools/latest/bin/sdkmanager" "$BUILD_SDK/tools/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMAN=$(command -v sdkmanager)
            ln -sfn "$SDKMAN" "$BUILD_SDK/tools/bin/sdkmanager"
          fi
          # ensure executable
          if [ -f "$BUILD_SDK/tools/bin/sdkmanager" ]; then
            chmod +x "$BUILD_SDK/tools/bin/sdkmanager" || true
          fi
          echo "Buildozer SDK tree contents (post-expose):"
          ls -la "$BUILD_SDK" || true
          echo "tools/bin contents:"
          ls -la "$BUILD_SDK/tools/bin" || true
          echo "cmdline-tools latest bin contents:"
          ls -la "$BUILD_SDK/cmdline-tools/latest/bin" || true
          # If sdkmanager still missing in BUILD_SDK/tools/bin, download commandlinetools as a fallback
          if [ ! -x "$BUILD_SDK/tools/bin/sdkmanager" ]; then
            echo "sdkmanager not found in $BUILD_SDK/tools/bin - attempting download fallback"
            TMPDIR=$(mktemp -d)
            CLICMD_ZIP="$TMPDIR/cmdline-tools.zip"
            # Google cmdline-tools for linux x86_64 (version may be updated by Google over time)
            echo "Downloading commandlinetools (fallback) to $CLICMD_ZIP"
            curl -fSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o "$CLICMD_ZIP" || {
              echo "Failed to download cmdline-tools via curl, attempting alternate URL"
              curl -fSL "https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip" -o "$CLICMD_ZIP" || true
            }
            if [ -f "$CLICMD_ZIP" ]; then
              unzip -q "$CLICMD_ZIP" -d "$TMPDIR"
              mkdir -p "$BUILD_SDK/cmdline-tools/latest"
              # Some zips contain a 'cmdline-tools' root folder, others 'tools' â€” move contents into latest
              if [ -d "$TMPDIR/cmdline-tools" ]; then
                mv "$TMPDIR/cmdline-tools"/* "$BUILD_SDK/cmdline-tools/latest/" || true
              else
                mv "$TMPDIR"/* "$BUILD_SDK/cmdline-tools/latest/" || true
              fi
              rm -rf "$TMPDIR"
            else
              echo "No cmdline-tools zip downloaded; skipping fallback download"
            fi
            # create compatibility link into tools/bin
            mkdir -p "$BUILD_SDK/tools/bin"
            if [ -x "$BUILD_SDK/cmdline-tools/latest/bin/sdkmanager" ]; then
              ln -sfn "$BUILD_SDK/cmdline-tools/latest/bin/sdkmanager" "$BUILD_SDK/tools/bin/sdkmanager"
              chmod +x "$BUILD_SDK/tools/bin/sdkmanager" || true
            fi
            echo "Post-fallback tools/bin listing:"
            ls -la "$BUILD_SDK/tools/bin" || true
          fi

      - name: Cache Buildozer and Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            ~/.gradle/caches
          key: ${{ runner.os }}-buildozer-py39-api33-${{ hashFiles('Android/buildozer.spec') }}

      - name: Ensure legacy sdkmanager path exists (compat)
        run: |
          SDK_ROOT=${ANDROID_SDK_ROOT:-$HOME/.buildozer/android/platform/android-sdk}
          GLOBAL_SDK=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          mkdir -p "$SDK_ROOT/tools/bin"
          if [ -x "$GLOBAL_SDK/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sf "$GLOBAL_SDK/cmdline-tools/latest/bin/sdkmanager" "$SDK_ROOT/tools/bin/sdkmanager"
          fi

      - name: Install buildozer and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install buildozer==1.5.0 cython virtualenv

      - name: Clean previous Buildozer state (avoid stale ANDROIDAPI)
        run: |
          echo "Removing project-specific build dir to avoid stale cache"
          rm -rf Android/.buildozer || true
          # Also clear global buildozer cache to ensure ANDROIDAPI=33 is used (not cached 31)
          echo "Clearing global buildozer cache to reset ANDROIDAPI"
          rm -rf $HOME/.buildozer || true
          echo "List workspace root:"
          ls -la || true
          echo "List Android dir:"
          ls -la Android || true

      - name: Prepare Android app sources
        run: |
          # Bundle core code into the Android package
          rm -rf Android/wolf
          rsync -a wolf/ Android/wolf/
          # Bundle role images into Android/wolf/resources/roles (no Android/assets)
          mkdir -p Android/wolf/resources/roles
          if [ -d images/roles ]; then rsync -a images/roles/ Android/wolf/resources/roles/; fi
          # Bundle sounds for BGM/SFX
          if [ -d sounds ]; then rsync -a sounds/ Android/sounds/; fi

      - name: Accept Android SDK licenses (redundant safeguard)
        run: |
          SDK_ROOT=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$HOME/.buildozer/android/platform/android-sdk" --licenses || true

      - name: Prepare Buildozer environment (PATH and vars)
        run: |
          BUILD_SDK="$HOME/.buildozer/android/platform/android-sdk"
          NDK_VERSION="25.1.8937393"
          BUILD_TOOLS_VERSION="33.0.2"
          echo "ANDROID_SDK_ROOT=$BUILD_SDK" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$BUILD_SDK" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$BUILD_SDK/ndk/$NDK_VERSION" >> "$GITHUB_ENV"
          # ensure platform-tools, cmdline-tools, build-tools and tools are in PATH for p4a
          echo "PATH=$BUILD_SDK/platform-tools:$BUILD_SDK/cmdline-tools/latest/bin:$BUILD_SDK/build-tools/$BUILD_TOOLS_VERSION:$BUILD_SDK/tools:$BUILD_SDK/tools/bin:$PATH" >> "$GITHUB_ENV"
          echo "--- Buildozer SDK contents ---"
          ls -la "$BUILD_SDK" || true
          echo "--- platform-tools ---"
          ls -la "$BUILD_SDK/platform-tools" || true
          echo "--- cmdline-tools ---"
          ls -la "$BUILD_SDK/cmdline-tools" || true

      - name: Build APK (debug)
        working-directory: Android
        env:
          BUILDOZER_WARN_ON_ROOT: '0'
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROIDAPI: '33'
          ANDROIDMINAPI: '21'
          ACLOCAL_PATH: '/usr/share/aclocal'
        run: |
          buildozer -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: onenightwerewolf-debug-apk
          path: Android/bin/*.apk
