name: Build Android APK

on:
  workflow_dispatch: {}
  push:
    paths:
      - 'Android/**'
      - 'wolf/**'
      - 'images/**'
      - '.github/workflows/android-apk.yml'

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip openjdk-17-jdk

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install required Android packages
        run: |
          SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_ROOT" --install \
            "build-tools;33.0.2" \
            "build-tools;36.1.0" \
            "platforms;android-31" \
            "platforms;android-33" \
            "platform-tools" \
            "ndk;25.1.8937393"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_ROOT" --licenses || true
          echo "GLOBAL_ANDROID_SDK_ROOT=$SDK_ROOT" >> "$GITHUB_ENV"

      - name: Prime Buildozer SDK directory
        run: |
          SDK_ROOT=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          BUILD_SDK="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILD_SDK"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$BUILD_SDK" --install \
            "build-tools;33.0.2" \
            "build-tools;36.1.0" \
            "platforms;android-31" \
            "platforms;android-33" \
            "platform-tools" \
            "ndk;25.1.8937393"
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$BUILD_SDK" --licenses || true
          echo "ANDROID_SDK_ROOT=$BUILD_SDK" >> "$GITHUB_ENV"

      - name: Expose sdkmanager to Buildozer SDK path
        run: |
          GLOBAL=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          BUILD_SDK="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILD_SDK/cmdline-tools"
          # Prefer existing latest, fall back to common installed dir
          if [ -d "$GLOBAL/cmdline-tools/latest" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/latest" "$BUILD_SDK/cmdline-tools/latest"
          elif [ -d "$GLOBAL/cmdline-tools/16.0" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/16.0" "$BUILD_SDK/cmdline-tools/latest"
          fi
          mkdir -p "$BUILD_SDK/tools/bin"
          if [ -x "$GLOBAL/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sfn "$GLOBAL/cmdline-tools/latest/bin/sdkmanager" "$BUILD_SDK/tools/bin/sdkmanager"
          fi
          echo "Buildozer SDK tree contents:" && ls -la "$BUILD_SDK" || true

      - name: Cache Buildozer and Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            ~/.gradle/caches
          key: ${{ runner.os }}-buildozer-${{ hashFiles('Android/buildozer.spec') }}

      - name: Ensure legacy sdkmanager path exists (compat)
        run: |
          SDK_ROOT=${ANDROID_SDK_ROOT:-$HOME/.buildozer/android/platform/android-sdk}
          GLOBAL_SDK=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          mkdir -p "$SDK_ROOT/tools/bin"
          if [ -x "$GLOBAL_SDK/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sf "$GLOBAL_SDK/cmdline-tools/latest/bin/sdkmanager" "$SDK_ROOT/tools/bin/sdkmanager"
          fi

      - name: Install buildozer and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install buildozer==1.5.0 cython virtualenv

      - name: Prepare Android app sources
        run: |
          # Bundle core code into the Android package
          rm -rf Android/wolf
          rsync -a wolf/ Android/wolf/
          # Bundle role images into Android/wolf/resources/roles (no Android/assets)
          mkdir -p Android/wolf/resources/roles
          if [ -d images/roles ]; then rsync -a images/roles/ Android/wolf/resources/roles/; fi
          # Bundle sounds for BGM/SFX
          if [ -d sounds ]; then rsync -a sounds/ Android/sounds/; fi

      - name: Accept Android SDK licenses (redundant safeguard)
        run: |
          SDK_ROOT=${GLOBAL_ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$HOME/.buildozer/android/platform/android-sdk" --licenses || true

      - name: Build APK (debug)
        working-directory: Android
        env:
          BUILDOZER_WARN_ON_ROOT: '0'
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          ANDROIDSDK: ${{ env.ANDROID_SDK_ROOT }}
          ANDROIDNDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.1.8937393
          ANDROIDAPI: '33'
          ANDROIDMINAPI: '21'
        run: |
          buildozer -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: onenightwerewolf-debug-apk
          path: Android/bin/*.apk
